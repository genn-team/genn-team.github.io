<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GeNN (Posts by Agrim Patil)</title><link>http://genn-team.github.io/</link><description></description><atom:link href="http://genn-team.github.io/authors/agrim-patil.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2025 &lt;a href="mailto:t.nowotny@sussex.ac.uk"&gt;GeNN Team&lt;/a&gt; </copyright><lastBuildDate>Wed, 17 Sep 2025 16:55:29 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Conda packaging for GeNN</title><link>http://genn-team.github.io/posts/conda-packaging-for-genn.html</link><dc:creator>Agrim Patil</dc:creator><description>&lt;hr&gt;
&lt;h3&gt;📂 Project Repository&lt;/h3&gt;
&lt;p&gt;🔗 &lt;a href="https://github.com/Agrim-P777/Conda-package-GeNN"&gt;Conda-package-GeNN&lt;/a&gt;&lt;br&gt;
This repository contains &lt;em&gt;all the code, packaging recipes, and documentation&lt;/em&gt; developed during my Google Summer of Code project.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;📑 Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;🌍 &lt;a href="http://genn-team.github.io/posts/conda-packaging-for-genn.html#-google-summer-of-code-gsoc"&gt;Google Summer of Code (GSoC)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;🧠 &lt;a href="http://genn-team.github.io/posts/conda-packaging-for-genn.html#-about-incf"&gt;About INCF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;⚡ &lt;a href="http://genn-team.github.io/posts/conda-packaging-for-genn.html#-about-genn"&gt;About GeNN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;❓ &lt;a href="http://genn-team.github.io/posts/conda-packaging-for-genn.html#-problem-statement"&gt;Problem Statement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;📦 &lt;a href="http://genn-team.github.io/posts/conda-packaging-for-genn.html#-deliverables"&gt;Deliverables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;🎮 &lt;a href="http://genn-team.github.io/posts/conda-packaging-for-genn.html#-rise-of-cuda-in-neural-simulations"&gt;Rise of CUDA in Neural Simulations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;📦 &lt;a href="http://genn-team.github.io/posts/conda-packaging-for-genn.html#-why-conda-and-not-pypi"&gt;Why Conda (and not PyPI)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;🏗️ &lt;a href="http://genn-team.github.io/posts/conda-packaging-for-genn.html#%EF%B8%8F-package-architecture"&gt;Package Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;⚔️ &lt;a href="http://genn-team.github.io/posts/conda-packaging-for-genn.html#%EF%B8%8F-challenges-faced-and-solutions"&gt;Challenges Faced and Solutions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;🌀 &lt;a href="http://genn-team.github.io/posts/conda-packaging-for-genn.html#-challenge-1-transition-from-cuda-12x-to-cuda-12x"&gt;Challenge 1: Transition from CUDA &amp;lt;12.x to CUDA ≥12.x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;⚔️ &lt;a href="http://genn-team.github.io/posts/conda-packaging-for-genn.html#%EF%B8%8F-challenge-2-setting-cuda_path-after-installation"&gt;Challenge 2: Setting CUDA_PATH After Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;⚔️ &lt;a href="http://genn-team.github.io/posts/conda-packaging-for-genn.html#%EF%B8%8F-challenge-3-moving-windows-build-to-nmake--msbuild"&gt;Challenge 3: Moving Windows Build to NMake + MSBuild&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;⚔️ &lt;a href="http://genn-team.github.io/posts/conda-packaging-for-genn.html#%EF%B8%8F-challenge-4-fixing-macos-dylib-handling-in-pygenn-cpu"&gt;Challenge 4: Fixing macOS .dylib Handling in pygenn-cpu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;📦 &lt;a href="http://genn-team.github.io/posts/conda-packaging-for-genn.html#-conda-forge-packages"&gt;Conda-Forge Packages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;🌟 &lt;a href="http://genn-team.github.io/posts/conda-packaging-for-genn.html#-impact-of-the-package"&gt;Impact of the Package&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;🌍 Google Summer of Code (GSoC)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://summerofcode.withgoogle.com/"&gt;Google Summer of Code (GSoC)&lt;/a&gt; is an annual global program focused on bringing new contributors into open source software development.&lt;br&gt;
Contributors work with open source organizations under the guidance of mentors to learn, code, and make impactful contributions during the summer.&lt;/p&gt;
&lt;h4&gt;📊 GSoC 2025 Highlights&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;15,240 applicants&lt;/strong&gt; from &lt;strong&gt;130 countries&lt;/strong&gt; submitted &lt;strong&gt;23,559 proposals&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;185 mentoring organizations&lt;/strong&gt; selected &lt;strong&gt;1,272 contributors&lt;/strong&gt; from &lt;strong&gt;68 countries&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;66.3% of contributors&lt;/strong&gt; had &lt;em&gt;no prior open source experience&lt;/em&gt;, showing GSoC’s accessibility  &lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;three-week Community Bonding period&lt;/strong&gt; helps contributors and mentors plan and get oriented before coding  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;🔗 &lt;a href="https://opensource.googleblog.com/2025/05/gsoc-2025-we-have-our-contributors.html"&gt;Read more on the official announcement&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;🧠 About INCF&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.incf.org/"&gt;&lt;img alt="INCF" src="https://gist.github.com/user-attachments/assets/3cce81f1-081a-4d65-a0c0-42321f10325a"&gt;&lt;/a&gt;&lt;br&gt;
The &lt;a href="https://www.incf.org/"&gt;International Neuroinformatics Coordinating Facility (INCF)&lt;/a&gt; is an open and FAIR (Findable, Accessible, Interoperable, and Reusable) neuroscience standards organization.&lt;br&gt;
Launched in 2005 through a proposal from the OECD Global Science Forum, INCF’s mission is to make neuroscience data and knowledge &lt;strong&gt;globally shareable and reusable&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;🌐 Impact on Society&lt;/h4&gt;
&lt;p&gt;By developing community-driven standards and tools for data sharing, analysis, modeling, and simulation, INCF:
- Promotes &lt;strong&gt;collaboration&lt;/strong&gt; across international neuroscience communities&lt;br&gt;
- Enables &lt;strong&gt;reproducible and scalable research&lt;/strong&gt;&lt;br&gt;
- Accelerates &lt;strong&gt;discoveries in brain science&lt;/strong&gt;&lt;br&gt;
- Supports better understanding of brain function in both &lt;strong&gt;health and disease&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;Through these efforts, INCF helps build a more open scientific ecosystem, ultimately contributing to advances in healthcare, mental health, and neurological research worldwide.&lt;/p&gt;
&lt;h3&gt;⚡ About GeNN&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://genn-team.github.io/"&gt;&lt;img alt="GeNN" src="https://gist.github.com/user-attachments/assets/16386ccf-35dd-4ae5-93fa-fd662fdce122"&gt;&lt;/a&gt;&lt;br&gt;
The &lt;a href="https://genn-team.github.io/"&gt;GPU-enhanced Neuronal Networks (GeNN)&lt;/a&gt; project is a code generation framework designed to accelerate the simulation of spiking neural networks (SNNs) using GPUs.  &lt;/p&gt;
&lt;h4&gt;🔬 Role in Neuroscience&lt;/h4&gt;
&lt;p&gt;GeNN plays a crucial role in computational neuroscience by:
- Enabling &lt;strong&gt;fast and efficient simulation&lt;/strong&gt; of large-scale spiking neural networks&lt;br&gt;
- Allowing researchers to &lt;strong&gt;prototype and test brain-inspired models&lt;/strong&gt; at unprecedented scales&lt;br&gt;
- Supporting &lt;strong&gt;reproducibility and standardization&lt;/strong&gt; in neural simulations&lt;br&gt;
- Bridging the gap between &lt;strong&gt;biological realism and computational efficiency&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;Through its GPU acceleration, GeNN empowers neuroscientists to explore complex models of brain function that would otherwise be computationally prohibitive.&lt;/p&gt;
&lt;h3&gt;❓ Problem Statement&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://genn-team.github.io/"&gt;GeNN&lt;/a&gt; is a &lt;strong&gt;C++ library&lt;/strong&gt; that generates code for efficiently simulating &lt;strong&gt;Spiking Neural Networks (SNNs)&lt;/strong&gt; using GPUs.&lt;br&gt;
To compile the generated code, GeNN requires a &lt;strong&gt;C++ compiler&lt;/strong&gt; and development versions of backend dependencies such as &lt;strong&gt;CUDA&lt;/strong&gt;.  &lt;/p&gt;
&lt;p&gt;Currently, this means GeNN must be &lt;strong&gt;installed from source&lt;/strong&gt;, which can be a barrier for many potential users:
- Researchers may not have the right compiler or CUDA version installed
- Installation errors can take hours to resolve
- New users may be discouraged before even running their first simulation&lt;/p&gt;
&lt;h4&gt;🎯 Project Goal&lt;/h4&gt;
&lt;p&gt;For this project, I aimed to develop a &lt;strong&gt;Conda (Forge) package&lt;/strong&gt; for GeNN which:
- Handles the installation of all required dependencies (C++, CUDA, libraries)
- Provides pre-built binaries for Linux, Windows, and macOS
- Makes installation as simple as:&lt;/p&gt;
&lt;p&gt;```bash
  conda install -c conda-forge pygenn-cpu   # CPU-only
  conda install -c conda-forge pygenn-cuda  # CUDA-enabled&lt;/p&gt;
&lt;h4&gt;📦 Deliverables&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;✅ Conda-Forge recipes for both &lt;strong&gt;CPU&lt;/strong&gt; and &lt;strong&gt;CUDA&lt;/strong&gt; variants of GeNN&lt;/li&gt;
&lt;li&gt;✅ User documentation and installation instructions&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;🎮 Rise of CUDA in Neural Simulations&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://developer.nvidia.com/cuda-toolkit"&gt;&lt;img alt="NVIDIA" src="https://gist.github.com/user-attachments/assets/c8d2b869-7d5b-47a1-91f3-4acb862e5e2b"&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;The introduction of &lt;strong&gt;CUDA (Compute Unified Device Architecture)&lt;/strong&gt; by NVIDIA revolutionized the way scientists and engineers simulate neural networks.  &lt;/p&gt;
&lt;h4&gt;🚀 Why CUDA Matters&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Provides &lt;strong&gt;massive parallelism&lt;/strong&gt; by leveraging thousands of GPU cores  &lt;/li&gt;
&lt;li&gt;Accelerates &lt;strong&gt;matrix operations&lt;/strong&gt; and &lt;strong&gt;synaptic updates&lt;/strong&gt; critical for spiking neural networks  &lt;/li&gt;
&lt;li&gt;Reduces simulation times from &lt;strong&gt;hours or days to minutes or seconds&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;Allows scaling to &lt;strong&gt;millions of neurons and synapses&lt;/strong&gt; in realistic brain models  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;🧩 Impact on Neuroscience&lt;/h4&gt;
&lt;p&gt;By harnessing CUDA, researchers can:
- Explore &lt;strong&gt;biologically detailed models&lt;/strong&gt; of neural circuits&lt;br&gt;
- Run &lt;strong&gt;real-time simulations&lt;/strong&gt; for robotics and brain-inspired AI&lt;br&gt;
- Investigate complex dynamics of the brain that were previously infeasible due to computational limits  &lt;/p&gt;
&lt;p&gt;In short, CUDA has been a &lt;strong&gt;key enabler&lt;/strong&gt; in advancing computational neuroscience and the adoption of frameworks like &lt;strong&gt;GeNN&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;📦 Why Conda (and not PyPI)&lt;/h3&gt;
&lt;p&gt;We chose &lt;strong&gt;Conda&lt;/strong&gt; because our package is not just Python — it also includes a &lt;strong&gt;C++ backend and CUDA code&lt;/strong&gt;.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Conda can package &lt;strong&gt;non-Python dependencies&lt;/strong&gt; (C++, CUDA, compilers, system libraries), while PyPI is limited to Python-only distributions.  &lt;/li&gt;
&lt;li&gt;With Conda we can &lt;strong&gt;pin CUDA versions and compilers&lt;/strong&gt;, ensuring compatibility across Linux, Windows, and macOS.  &lt;/li&gt;
&lt;li&gt;This makes Conda the better choice for distributing GPU-accelerated scientific software like &lt;strong&gt;GeNN&lt;/strong&gt;, where reproducibility and native dependencies are critical.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;🏗️ Package Architecture&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://conda-forge.org/"&gt;&lt;img alt="Conda-Forge" src="https://gist.github.com/user-attachments/assets/31591c25-0ccd-4147-ad2e-ed39d6964785"&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;We designed the package to provide &lt;strong&gt;two build variants&lt;/strong&gt; of GeNN:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;CPU-only&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;Lightweight build that works without CUDA  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Useful for users who want to experiment with spiking neural networks on any system  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CUDA-enabled&lt;/strong&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Full GPU acceleration using modular CUDA packages  &lt;/li&gt;
&lt;li&gt;Ideal for large-scale neuroscience simulations  &lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;📂 Structure&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Separate Conda recipes: &lt;code&gt;pygenn-cpu&lt;/code&gt; and &lt;code&gt;pygenn-cuda&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Each recipe pins Python, NumPy ABI, and (for CUDA builds) modular CUDA components like &lt;code&gt;cuda-nvcc&lt;/code&gt;, &lt;code&gt;cuda-cudart&lt;/code&gt;, and &lt;code&gt;cuda-libraries&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Shared test suite ensures both variants behave consistently  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This dual-architecture approach makes GeNN more &lt;strong&gt;accessible and reproducible&lt;/strong&gt;, whether on laptops or GPU clusters.  &lt;/p&gt;
&lt;p&gt;🔗 &lt;a href="https://github.com/Agrim-P777/Conda-package-GeNN/wiki/05.-GeNN-%E2%80%90-Conda-Package-Structure:-CPU%E2%80%90Only-and-CUDA%E2%80%90Enabled"&gt;Read more on the detailed package structure&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;⚔️ Challenges Faced and Solutions&lt;/h3&gt;
&lt;h4&gt;🌀 Challenge 1: Transition from CUDA &amp;lt;12.x to CUDA ≥12.x&lt;/h4&gt;
&lt;p&gt;Initially, our package was built for &lt;strong&gt;CUDA 11.7&lt;/strong&gt;, which used a &lt;strong&gt;monolithic toolkit package&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;👉 &lt;a href="https://github.com/Agrim-P777/Conda-package-GeNN/blob/main/pygenn-linux-cuda11.7/meta.yaml"&gt;Example: CUDA 11.7 recipe&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;However, starting with &lt;strong&gt;CUDA 12.x&lt;/strong&gt;, Conda-Forge adopted a &lt;strong&gt;modular CUDA packaging&lt;/strong&gt; system:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Instead of a single &lt;code&gt;cudatoolkit&lt;/code&gt; package&lt;/li&gt;
&lt;li&gt;CUDA is split into components like &lt;code&gt;cuda-nvcc&lt;/code&gt;, &lt;code&gt;cuda-cudart&lt;/code&gt;, &lt;code&gt;cuda-libraries&lt;/code&gt;, &lt;code&gt;cuda-libraries-dev&lt;/code&gt;, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;🔗 &lt;a href="https://github.com/Agrim-P777/Conda-package-GeNN/wiki/06.-Understanding-CUDA-Packaging-in-Conda%E2%80%90Forge:-Pre%E2%80%9012-vs-Post%E2%80%9012-Versions"&gt;Detailed explanation: Pre-12 vs Post-12 CUDA packaging&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;✅ Our Solution&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Migrated the recipe to &lt;strong&gt;modular CUDA dependencies&lt;/strong&gt; in &lt;code&gt;meta.yaml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Explicitly pinned the CUDA version with:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;yaml
- cuda-version =={{ cuda_version }}
- cuda-nvcc {{ cuda_nvcc }}
- cuda-cudart {{ cuda_cudart }}
- cuda-libraries {{ cuda_libraries }}
- cuda-libraries-dev {{ cuda_libraries_dev }}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ensured compatibility across &lt;strong&gt;Linux, Windows, and macOS&lt;/strong&gt; by adjusting the build matrix and using Conda’s modular CUDA toolchain.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This transition was essential to keep the package &lt;strong&gt;future-proof and aligned&lt;/strong&gt; with Conda-Forge’s evolving CUDA ecosystem.&lt;/p&gt;
&lt;h4&gt;⚔️ Challenge 2: Setting &lt;code&gt;CUDA_PATH&lt;/code&gt; After Installation&lt;/h4&gt;
&lt;p&gt;During testing, we discovered that after installing the CUDA-enabled package,&lt;/p&gt;
&lt;p&gt;the &lt;strong&gt;&lt;code&gt;CUDA_PATH&lt;/code&gt; environment variable&lt;/strong&gt; was &lt;strong&gt;not automatically set&lt;/strong&gt; in the Conda environment.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This caused issues on both &lt;strong&gt;Linux&lt;/strong&gt; and &lt;strong&gt;Windows&lt;/strong&gt;, where users needed &lt;code&gt;CUDA_PATH&lt;/code&gt; for compiling and running GeNN models.&lt;/li&gt;
&lt;li&gt;Without it, the CUDA backend could not be located properly by the build system.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;🔗 &lt;a href="https://github.com/Agrim-P777/Conda-package-GeNN/wiki/08.-Including-a-post%E2%80%90link.sh-script-in-the-Conda-Package"&gt;Reference: post-link script design&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;✅ Our Solution&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Added &lt;strong&gt;&lt;code&gt;post-link.sh&lt;/code&gt;&lt;/strong&gt; (Linux/macOS) and &lt;strong&gt;&lt;code&gt;post-link.bat&lt;/code&gt;&lt;/strong&gt; (Windows) scripts to the recipe.&lt;/li&gt;
&lt;li&gt;These scripts:&lt;ul&gt;
&lt;li&gt;Notify users that they must export or set &lt;code&gt;CUDA_PATH&lt;/code&gt; in their shell session&lt;/li&gt;
&lt;li&gt;Provide clear guidance on how to configure it (&lt;code&gt;export CUDA_PATH=$CONDA_PREFIX&lt;/code&gt; on Linux/macOS, &lt;code&gt;set CUDA_PATH=%CONDA_PREFIX%\\Library&lt;/code&gt; on Windows)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example &lt;code&gt;post-link.sh&lt;/code&gt; Script&lt;/strong&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"============================================"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"PyGeNN CUDA backend installed successfully!"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"To enable CUDA support, set the environment variable:"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"    export CUDA_PATH=&lt;/span&gt;&lt;span class="nv"&gt;$CONDA_PREFIX&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Alternatively, if you have a system-wide CUDA installation:"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"    export CUDA_PATH=/usr/local/cuda-12.x"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"PyGeNN will automatically use CUDA_PATH if set; otherwise, you may"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"need to manually configure it for certain use cases."&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"============================================"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This ensures users are explicitly informed about the required step, making the installation process &lt;strong&gt;clearer and less error-prone&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;⚔️ Challenge 3: Moving Windows Build to NMake + MSBuild&lt;/h4&gt;
&lt;p&gt;Originally, the Windows build system relied only on &lt;strong&gt;MSBuild&lt;/strong&gt;, which was insufficient to support conda pacakge's 
GeNN’s requirement for &lt;strong&gt;runtime code compilation&lt;/strong&gt; of models.  &lt;/p&gt;
&lt;h4&gt;✅ Our Solution&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Migrated the Windows backend to a hybrid &lt;strong&gt;NMake + MSBuild&lt;/strong&gt; system.  &lt;/li&gt;
&lt;li&gt;Benefits of this change:&lt;/li&gt;
&lt;li&gt;Enabled &lt;strong&gt;runtime compilation&lt;/strong&gt; of CUDA kernels on Windows  &lt;/li&gt;
&lt;li&gt;Added &lt;strong&gt;robust CUDA path management&lt;/strong&gt;, ensuring builds work with Conda’s modular CUDA layout  &lt;/li&gt;
&lt;li&gt;Standardized the use of &lt;strong&gt;&lt;code&gt;CUDA_LIBRARY_PATH&lt;/code&gt;&lt;/strong&gt; across Windows environments for consistency  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This migration improved reliability and made the Windows build &lt;strong&gt;much closer to Linux in flexibility&lt;/strong&gt;,&lt;br&gt;
while also aligning with Conda’s CUDA packaging best practices.  &lt;/p&gt;
&lt;p&gt;🔗 &lt;a href="https://github.com/genn-team/genn/pull/705"&gt;My Pull Request #705 – robust CUDA lib path resolution for Conda &amp;amp; system installs&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;⚔️ Challenge 4: Fixing macOS &lt;code&gt;.dylib&lt;/code&gt; Handling in &lt;code&gt;pygenn-cpu&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;When building the &lt;strong&gt;CPU-only PyGeNN package&lt;/strong&gt; on macOS, we encountered an issue where&lt;br&gt;
the required &lt;strong&gt;dynamic libraries (&lt;code&gt;.dylib&lt;/code&gt;)&lt;/strong&gt; were &lt;strong&gt;not being copied correctly&lt;/strong&gt; into the installed package directory.&lt;br&gt;
This caused runtime errors where Python could not locate GeNN’s backend libraries.&lt;/p&gt;
&lt;h4&gt;✅ Our Solution (My PR 🔧)&lt;/h4&gt;
&lt;p&gt;I submitted &lt;a href="https://github.com/genn-team/genn/pull/707"&gt;PR #707&lt;/a&gt; to fix the &lt;strong&gt;macOS library handling&lt;/strong&gt; in &lt;code&gt;setup.py&lt;/code&gt;.&lt;br&gt;
Key technical improvements included:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Dynamic Library Discovery&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;Updated &lt;code&gt;setup.py&lt;/code&gt; to explicitly find GeNN’s &lt;code&gt;.dylib&lt;/code&gt; artifacts generated during the build process.  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ensured both the &lt;strong&gt;core &lt;code&gt;libgenn_dynamic.dylib&lt;/code&gt;&lt;/strong&gt; and the &lt;strong&gt;CPU backend libraries&lt;/strong&gt; were properly detected.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Correct Copy into &lt;code&gt;site-packages&lt;/code&gt;&lt;/strong&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Added logic to copy these &lt;code&gt;.dylib&lt;/code&gt; files into the final &lt;code&gt;pygenn&lt;/code&gt; installation directory under &lt;code&gt;site-packages&lt;/code&gt;.  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This guarantees the Python extension modules can locate their linked dynamic libraries at runtime.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;macOS Loader Path Fixes&lt;/strong&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Adjusted the &lt;code&gt;install_name&lt;/code&gt; handling so that macOS’s runtime linker resolves the &lt;code&gt;.dylib&lt;/code&gt; files correctly.  &lt;/li&gt;
&lt;li&gt;Prevented the “image not found” errors that occurred when relocating the package to a Conda environment.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;🔬 Impact&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Resolved &lt;strong&gt;import-time failures&lt;/strong&gt; on macOS for the &lt;code&gt;pygenn-cpu&lt;/code&gt; package.  &lt;/li&gt;
&lt;li&gt;Improved &lt;strong&gt;cross-platform parity&lt;/strong&gt;, since Linux &lt;code&gt;.so&lt;/code&gt; handling was already stable.  &lt;/li&gt;
&lt;li&gt;Made the CPU-only build truly &lt;strong&gt;portable&lt;/strong&gt; across Conda environments on macOS.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;🔗 &lt;a href="https://github.com/genn-team/genn/pull/707"&gt;My Pull Request #707 – macOS &lt;code&gt;.dylib&lt;/code&gt; fix in setup.py&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;📦 Conda-Forge Packages&lt;/h3&gt;
&lt;p&gt;After resolving build system and packaging challenges, we contributed to the &lt;strong&gt;official Conda-Forge recipes&lt;/strong&gt; for PyGeNN.&lt;/p&gt;
&lt;h4&gt;🚀 Published Packages&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;pygenn-cuda&lt;/strong&gt; → &lt;a href="https://github.com/conda-forge/staged-recipes/pull/30899"&gt;staged-recipes PR #30899&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;GPU-accelerated build with modular CUDA support&lt;/li&gt;
&lt;li&gt;Targets Linux and Windows with reproducible CUDA environments&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pygenn-cpu&lt;/strong&gt; → &lt;a href="https://github.com/conda-forge/staged-recipes/pull/30907"&gt;staged-recipes PR #30907&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Lightweight CPU-only build&lt;/li&gt;
&lt;li&gt;Cross-platform support (Linux, Windows, macOS) without CUDA dependency&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;🌐 Impact&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Brought &lt;strong&gt;PyGeNN to the Conda-Forge ecosystem&lt;/strong&gt;, making installation as simple as:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bash
conda install -c conda-forge pygenn-cpu   # CPU-only
conda install -c conda-forge pygenn-cuda  # CUDA-enabled&lt;/code&gt;
- Improved &lt;strong&gt;discoverability, reproducibility, and accessibility&lt;/strong&gt; for neuroscience researchers and developers worldwide.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;🌟 Impact of the Package&lt;/h3&gt;
&lt;p&gt;Before our Conda-Forge packages, users had to &lt;strong&gt;install GeNN from source&lt;/strong&gt;:&lt;br&gt;
- Clone the repository&lt;br&gt;
- Configure compilers and CUDA toolchains manually&lt;br&gt;
- Build the C++ backend&lt;br&gt;
- Troubleshoot platform-specific errors (Linux, Windows, macOS)  &lt;/p&gt;
&lt;p&gt;This process was &lt;strong&gt;time-consuming and error-prone&lt;/strong&gt;, often taking &lt;strong&gt;hours&lt;/strong&gt; for new users.&lt;/p&gt;
&lt;h4&gt;🚀 Improvements with Conda Packages&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Installation reduced to a &lt;strong&gt;single command&lt;/strong&gt;:&lt;br&gt;
&lt;code&gt;bash
  conda install -c conda-forge pygenn-cpu   # CPU-only
  conda install -c conda-forge pygenn-cuda  # CUDA-enabled&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No manual compilation&lt;/strong&gt; needed — all binaries are pre-built for the target platform&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cross-platform availability&lt;/strong&gt;: Linux, Windows, and macOS&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pinned toolchains and CUDA versions&lt;/strong&gt; ensure reproducibility and stability&lt;/li&gt;
&lt;li&gt;Eliminates setup barriers, letting researchers focus on &lt;strong&gt;science, not build systems&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;🔬 Impact on Researchers&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Decreased installation time from &lt;strong&gt;hours → minutes&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Made GeNN accessible to &lt;strong&gt;a wider audience&lt;/strong&gt;, including those without deep build/DevOps expertise&lt;/li&gt;
&lt;li&gt;Strengthened the reliability of &lt;strong&gt;neuroscience workflows&lt;/strong&gt; by providing reproducible environments&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In short, this packaging effort turned GeNN from a &lt;strong&gt;complex source-based project&lt;/strong&gt; into an &lt;strong&gt;accessible plug-and-play library&lt;/strong&gt; for the neuroscience community!&lt;/p&gt;</description><category>GSOC</category><guid>http://genn-team.github.io/posts/conda-packaging-for-genn.html</guid><pubDate>Wed, 17 Sep 2025 16:54:15 GMT</pubDate></item></channel></rss>